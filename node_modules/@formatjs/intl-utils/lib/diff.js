var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { differenceInCalendarDays, differenceInCalendarQuarters, differenceInCalendarYears, differenceInSeconds, differenceInCalendarMonths, differenceInCalendarWeeks, } from 'date-fns';
export function selectUnit(from, to, thresholds) {
    if (to === void 0) { to = Date.now(); }
    if (thresholds === void 0) { thresholds = {}; }
    var resolvedThresholds = __assign({}, DEFAULT_THRESHOLDS, (thresholds || {}));
    var secs = differenceInSeconds(from, to);
    if (Math.abs(secs) < resolvedThresholds.second) {
        return {
            value: Math.round(secs),
            unit: 'second',
        };
    }
    var mins = secs / 60;
    if (Math.abs(mins) < resolvedThresholds.minute) {
        return {
            value: Math.round(mins),
            unit: 'minute',
        };
    }
    var hours = mins / 60;
    if (Math.abs(hours) < resolvedThresholds.hour) {
        return {
            value: Math.round(hours),
            unit: 'hour',
        };
    }
    var years = differenceInCalendarYears(from, to);
    if (Math.abs(years) > 0) {
        return {
            value: Math.round(years),
            unit: 'year',
        };
    }
    if (resolvedThresholds.quarter) {
        var quarters = differenceInCalendarQuarters(from, to);
        if (Math.abs(quarters) > 0) {
            return {
                value: Math.round(quarters),
                unit: 'quarter',
            };
        }
    }
    var months = differenceInCalendarMonths(from, to);
    if (Math.abs(months) > 0) {
        return {
            value: Math.round(months),
            unit: 'month',
        };
    }
    var weeks = differenceInCalendarWeeks(from, to);
    if (Math.abs(weeks) > 0) {
        return {
            value: Math.round(weeks),
            unit: 'week',
        };
    }
    var days = differenceInCalendarDays(from, to);
    return {
        value: Math.round(days),
        unit: 'day',
    };
}
export var DEFAULT_THRESHOLDS = {
    second: 45,
    minute: 45,
    hour: 22,
    quarter: false,
};
